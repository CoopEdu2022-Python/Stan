#1.python依赖是什么?
'''
Python依赖本质上就是一个类调用另一个类的方法
比如def eat(self,obj)
       obj.eat()
上面是cat的方法

def eat(self):
    print("I was eating")
上面是mouth的方法

通过cat.eat(mouth)就可以表示猫用嘴吃饭

'''

#2.python的依赖管理存在哪些问题?
'''
在 Python 中，运行时及其依赖项是系统范围的。一个系统只有一个运行时，并且依赖项在该系统上的所有项目之间共享
Python 项目的环境管理比较混乱
'''

#3.DependencyHell是什么
'''
依赖性系统产生的问题，一个软件包依赖于别的软件包，使得软件包系统形成了复杂的依赖关系
一些软件包可能因依赖性无法满足而需要安装大量软件包，而另一方面一个软件报的卸载可能导致众多软件包的无法运行
'''

#4.为什么会出现这些问题
'''
Python项目的环境管理比较混乱。 Python为了体现脚本语言的特性，系统化和标准化程度都不太高。
导致了简单项目做的快，但是一旦项目复杂起来，python的依赖管理，环境配置和项目启动等到处都是坑
'''

#5.Python是如何解决这些问题的?
'''
通过创建虚拟环境(Venv)
'''

#6.是否有第三方工具解决了这些问题?
'''
通过Kenneth Reitz的pipenv自动处理依赖关系和避免版本冲突,这也是官方推荐的工具
'''